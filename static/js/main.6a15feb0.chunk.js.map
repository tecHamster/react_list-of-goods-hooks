{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Initial","sortValue","setSortValue","isReversed","setIsReversed","isSortApplied","goods","preparedGoods","sort","good1","good2","SortByLength","length","SortByAlphabet","localeCompare","reverse","getPreparedGoods","className","type","onClick","prevValue","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,+BAAAA,I,mCAAAA,I,sBAAAA,M,KAML,IAyBaE,EAAgB,WAC3B,MAAkCC,mBAAmBH,EAASI,SAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAkB,GAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KAMMC,EAAgBJ,IAAcL,EAASI,UAA0B,IAAfG,EAElDG,EAnCiB,SACvBA,EACAL,EACAE,GAEA,IAAMI,EAAgB,YAAID,GAAOE,MAAK,SAACC,EAAeC,GACpD,OAAQT,GACN,KAAKL,EAASe,aACZ,OAAOF,EAAMG,OAASF,EAAME,OAE9B,KAAKhB,EAASiB,eACZ,OAAOJ,EAAMK,cAAcJ,GAE7B,QACE,OAAO,MAQb,OAJIP,GACFI,EAAcQ,UAGTR,EAaOS,CAAiBnB,EAAiBI,EAAWE,GAE3D,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBhB,IAAcL,EAASiB,eAAiB,WAAa,IAClFM,QAAS,kBAAMjB,EAAaN,EAASiB,iBAHvC,iCAQA,wBACEK,KAAK,SACLD,UAAS,4BAAuBhB,IAAcL,EAASe,aAAe,WAAa,IACnFQ,QAAS,kBAAMjB,EAAaN,EAASe,eAHvC,4BAQA,wBACEO,KAAK,SACLD,UAAS,4BAAuBd,EAAa,GAAK,YAClDgB,QAAS,kBAAMf,GAAc,SAACgB,GAAD,OAAgBA,MAH/C,qBAQEf,GACA,wBACEa,KAAK,SACLD,UAAU,4BACVE,QAAS,kBAvCjBjB,EAAaN,EAASI,cACtBI,GAAc,IAmCR,sBAWJ,6BACGE,GAASA,EAAMe,KAAI,SAAAC,GAAI,OACtB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCnGjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6a15feb0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  SortByLength,\n  SortByAlphabet,\n  Initial,\n}\n\nconst getPreparedGoods = (\n  goods: string[],\n  sortValue: SortType,\n  isReversed: boolean,\n): string[] => {\n  const preparedGoods = [...goods].sort((good1: string, good2: string) => {\n    switch (sortValue) {\n      case SortType.SortByLength:\n        return good1.length - good2.length;\n\n      case SortType.SortByAlphabet:\n        return good1.localeCompare(good2);\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App: React.FC = () => {\n  const [sortValue, setSortValue] = useState<SortType>(SortType.Initial);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n  const setInitialValues = () => {\n    setSortValue(SortType.Initial);\n    setIsReversed(false);\n  };\n\n  const isSortApplied = sortValue !== SortType.Initial || isReversed !== false;\n\n  const goods = getPreparedGoods(goodsFromServer, sortValue, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortValue !== SortType.SortByAlphabet ? 'is-light' : ''}`}\n          onClick={() => setSortValue(SortType.SortByAlphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortValue !== SortType.SortByLength ? 'is-light' : ''}`}\n          onClick={() => setSortValue(SortType.SortByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n          onClick={() => setIsReversed((prevValue) => !prevValue)}\n        >\n          Reverse\n        </button>\n\n        {(isSortApplied) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => setInitialValues()}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {goods && goods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}